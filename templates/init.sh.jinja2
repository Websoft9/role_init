#!/bin/bash
new_password=$(pwgen -ncCs 15 1)

#1 database password init
{% if init_db is not none %}
{% for db_names,dbs in init_db.items() %}

{% if db_names == 'mysql' or db_names == 'mariadb' %}
sudo sh -c 'echo "init mysql&mariadb started at" $(date -d now)  1>> /tmp/init_debug.txt'
mysqladmin -u{{dbs.admin}} -p{{dbs.password }} -h ::1 password $new_password
mysqladmin -u{{dbs.admin}} -p{{dbs.password }} -h 127.0.0.1 password $new_password
mysqladmin -u{{dbs.admin}} -p{{dbs.password }} -h localhost password $new_password
{% if dbs.user is defined and dbs.user is not none %}
{% for dbs_app_user in dbs.user %}
mysqladmin -u{{dbs_app_user}} -p{{dbs.password}} password $new_password
{% endfor %}
{% endif %}
sed -i "s/{{dbs.password}}/$new_password/g" /credentials/password.txt
{% endif %}


{% if db_names == 'mongodb' %}
sleep 10s
sudo sh -c 'echo "init mongodb started at" $(date -d now)  1>> /tmp/init_debug.txt'
echo "
use admin
db.changeUserPassword('{{dbs.admin}}', '${new_password}')
exit
" | mongo admin -u {{dbs.admin}} -p {{dbs.password}}
{% if dbs.user is defined and dbs.user is not none %}
{% for dbs_app_user in dbs.user %}
echo "
use admin
db.changeUserPassword('{{dbs_app_user}}', '${new_password}')
exit
" | mongo admin -u {{dbs_app_user}} -p {{dbs.password}}
{% endfor %}
{% endif %}
sed -i "s/{{dbs.password}}/$new_password/g" /credentials/password.txt
{% endif %}


{% if db_names == 'postgresql' %}
sudo sh -c 'echo "init postgresql started at" $(date -d now)  1>> /tmp/init_debug.txt'
echo "               
ALTER USER {{dbs.admin}} WITH PASSWORD '${new_password}';
" | sudo -u {{dbs.admin}} psql
{% if dbs.user is defined and dbs.user is not none %}
{% for dbs_app_user in dbs.user %}
echo "               
ALTER USER {{dbs_app_user}} WITH PASSWORD '${new_password}';
" | sudo -u {{dbs.admin}} psql
{% endfor %}
{% endif %}
sed -i "s/{{dbs.password}}/$new_password/g" /credentials/password.txt
{% endif %}


{% if db_names == 'neo4j' %}
sudo sh -c 'echo "init neo4j started at" $(date -d now)  1>> /tmp/init_debug.txt'
echo "
ALTER CURRENT USER SET PASSWORD FROM '{{dbs.password}}' TO '${new_password}';
" | cypher-shell -u {{dbs.admin}} -p {{dbs.password}} -d system
{% if dbs.user is defined and dbs.user is not none %}
{% for dbs_app_user in dbs.user %}
echo "
ALTER CURRENT USER SET PASSWORD FROM '{{dbs.password}}' TO '${new_password}';
" | cypher-shell -u {{dbs_app_user}} -p {{dbs.password}} -d system
{% endfor %}
{% endif %}
sed -i "s/neo4j administrator password:{{dbs.password}}/neo4j administrator password: $new_password/" /credentials/password.txt
{% endif %}


{% if db_names == "docker" %}
sudo sh -c 'echo "init docker started at" $(date -d now)  1>> /tmp/init_debug.txt'
docker-compose -f {{dbs.path}} down -v
sed -i "s/{{dbs.password}}/$new_password/" {{dbs.path}}
docker-compose -f {{dbs.path}} up -d
sed -i "s/{{dbs.password}}/$new_password/g" /credentials/password.txt
{% endif %}

{% endfor %}
{% endif %}


#2 application password init
{% if init_application is not none %}
{% for app_name,app_attr in init_application.items() %}

{% if app_attr.config_paths is defined and app_attr.config_paths is not none %}
{% for path in app_attr.config_paths %}
sed -i "s/{{app_attr.password}}/$new_password/" {{path}}
{% endfor %}
{% endif %}

{% if app_attr.commands is defined and app_attr.commands is not none %}
{% for cmd in app_attr.commands %}
{{cmd}}
{% endfor %}
{% endif %}

sed -i "s/{{ app_name }} Password: {{app_attr.password}}/{{ app_name }} Password: $new_password/" /credentials/password.txt
{% endfor %}
{% endif %}
